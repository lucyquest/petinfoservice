// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: queries.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const getPetByID = `-- name: GetPetByID :one
SELECT id, name, date_of_birth FROM pets
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPetByID(ctx context.Context, ids uuid.UUID) (Pet, error) {
	row := q.db.QueryRowContext(ctx, getPetByID, ids)
	var i Pet
	err := row.Scan(&i.ID, &i.Name, &i.DateOfBirth)
	return i, err
}

const getPetsByIDs = `-- name: GetPetsByIDs :many
SELECT id, name, date_of_birth FROM pets
WHERE id = ANY($1::uuid[])
`

func (q *Queries) GetPetsByIDs(ctx context.Context, ids []uuid.UUID) ([]Pet, error) {
	rows, err := q.db.QueryContext(ctx, getPetsByIDs, pq.Array(ids))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pet
	for rows.Next() {
		var i Pet
		if err := rows.Scan(&i.ID, &i.Name, &i.DateOfBirth); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePetDateOfBirth = `-- name: UpdatePetDateOfBirth :exec
UPDATE pets SET date_of_birth = $2 WHERE id = $1
`

type UpdatePetDateOfBirthParams struct {
	ID          uuid.UUID
	DateOfBirth time.Time
}

func (q *Queries) UpdatePetDateOfBirth(ctx context.Context, arg UpdatePetDateOfBirthParams) error {
	_, err := q.db.ExecContext(ctx, updatePetDateOfBirth, arg.ID, arg.DateOfBirth)
	return err
}

const updatePetName = `-- name: UpdatePetName :exec
UPDATE pets SET name = $2 WHERE id = $1
`

type UpdatePetNameParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) UpdatePetName(ctx context.Context, arg UpdatePetNameParams) error {
	_, err := q.db.ExecContext(ctx, updatePetName, arg.ID, arg.Name)
	return err
}
