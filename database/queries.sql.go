// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: queries.sql

package database

import (
	"context"

	"github.com/lib/pq"
)

const getPetByID = `-- name: GetPetByID :one
SELECT id, name, date_of_birth FROM pets
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPetByID(ctx context.Context, ids string) (Pet, error) {
	row := q.db.QueryRowContext(ctx, getPetByID, ids)
	var i Pet
	err := row.Scan(&i.ID, &i.Name, &i.DateOfBirth)
	return i, err
}

const getPetsByIDs = `-- name: GetPetsByIDs :many
SELECT id, name, date_of_birth FROM pets
WHERE id = ANY($1::TEXT[])
`

func (q *Queries) GetPetsByIDs(ctx context.Context, ids []string) ([]Pet, error) {
	rows, err := q.db.QueryContext(ctx, getPetsByIDs, pq.Array(ids))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pet
	for rows.Next() {
		var i Pet
		if err := rows.Scan(&i.ID, &i.Name, &i.DateOfBirth); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
